@model accounting.ViewModels.WorkOrderVM

@{
    ViewBag.Title = "Editar Orden de Trabajo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Editar Orden de Trabajo</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.id, new { htmlAttributes = new { @class = "form-control", @disabled = "diasabled" } })              
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Fecha, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Fecha, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "Date" })
                @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductServiceId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProductServiceId, new SelectList(ViewBag.Servicio, "id", "nombre"), "Seleccione..", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductServiceId, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ProductServiceId, new { @id = "HiddenTipo" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Cantidad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Paciente, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Paciente, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProfesionalId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProfesionalId, new SelectList(ViewBag.Profesional, "id", "nombre"), "Seleccione..", htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.Status, "id", "descripcion"), "Seleccione..", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver al Listado", "Index")
</div>

    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
            $().ready(function () {
                $("#ProductServiceId").change(function () {
                    var valor = $("#ProductServiceId").val();
                    if (valor > 0) {
                        $("#HiddenTipo").val(valor);
                        CamposGet($("#ProductServiceId").val(), valor);
                    }
                });

              
                  var valor1 = $("#ProductServiceId").val();
                if (valor1 > 0) {
                    $("#HiddenTipo").val(valor1);
                    CamposGet($("#ProductServiceId").val(), valor1);
                    }
                    
                });

            

        function CamposGet(value) {
                $.getJSON(
                    '@Url.Action("CamposGet", "WorkOrder")' + "/" + value,
                    function (data) {
                        $.each(data, function (i, item) {
                            if (item.id == "1") {
                                $('#SocialWorkId').prop('disabled', false);
                                $('#Paciente').prop('disabled', false);
                                $('#ProfesionalId').prop('disabled', false);
                                console.log(item.id);
                            }
                            else {
                                console.log(data.val);
                                $('#SocialWorkId').prop('disabled', 'disabled');
                                $('#Paciente').prop('disabled', 'disabled');
                                $('#ProfesionalId').prop('disabled', 'disabled');
                                console.log(item.id);
                            }
                        });
                           }
                );
            };
    </script>
